//build ignore

// This program generates generated/consts.go. It can be invoked by running
// go run gen.go (go generate)

package main

import (
	"fmt"
	"github.com/stoewer/go-strcase"
	"log"
	"os"
	"os/user"
	"path"
	"strings"
	"text/template"
	"time"
)

var requiredEnvVars = []string{
	"DYNAMO_AWS_REGION",
	"DYNAMO_AWS_ACCESS_KEY_ID",
	"DYNAMO_AWS_SECRET_KEY",
	"DYNAMO_AWS_SESSION_TOKEN",
	"DYNAMO_EVENTS_TABLE_NAME",

	"S3_AWS_REGION",
	"S3_BUCKET",
	"S3_AWS_ACCESS_KEY_ID",
	"S3_AWS_SECRET_KEY",
	"S3_AWS_SESSION_TOKEN",

	"REQUIRED_SECRET_KEY",
	"GITHUB_ACCESS_TOKEN",
}

var environVariables = make(map[string]string, len(requiredEnvVars))

func init() {
	for _, key := range requiredEnvVars {
		value, found := os.LookupEnv(key)
		if !found {
			die(fmt.Errorf("required environment variable is missing: %s", key))
		}
		environVariables[key] = value
	}
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func toExportedCamel(value string) string {
	return strings.ReplaceAll(strings.ToLower(value), "_", "")
}

//go:generate go run gen.go
func main() {
	currentUser, err := user.Current()
	die(err)

	err = os.Mkdir("generated", 0700)
	if err != nil && !os.IsExist(err) {
		die(err)
	}

	f, err := os.Create(path.Join("generated", "consts.go"))
	die(err)

	defer func() {
		err := f.Close()
		die(err)
	}()

	err = packageTemplate.Execute(f, struct {
		Timestamp time.Time
		User      string
		Vars      map[string]string
	}{
		Timestamp: time.Now(),
		User:      currentUser.Name,
		Vars:      environVariables,
	})

	die(err)
}

var packageTemplate = template.Must(template.
	New("").
	Funcs(template.FuncMap{
		"toCamel": strcase.UpperCamelCase,
	}).
	Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
// using data from
// {{ .User }}
package generated

{{ range $key, $value := .Vars -}}
	const {{ toCamel $key }} = {{ printf "%q" $value }}
{{ end }}
`))
