// +build ignore

// This program generates generated/consts.go. It can be invoked by running
// go run gen.go (go generate)

package main

import (
	"fmt"
	"log"
	"os"
	"os/user"
	"path"
	"text/template"
	"time"
)

var requiredEnvVars = []string{
	"S3_AWS_REGION",
	"S3_BUCKET",
	"S3_AWS_ACCESS_KEY_ID",
	"S3_AWS_SECRET_KEY",
	"S3_AWS_SESSION_TOKEN",
	"REQUIRED_SECRET_KEY",
}

var environVariables = make(map[string]string, len(requiredEnvVars))

func init() {
	for _, key := range requiredEnvVars {
		value, found := os.LookupEnv(key)
		if !found {
			die(fmt.Errorf("required environment variable is missing: %s", key))
		}
		environVariables[key] = value
	}
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

//go:generate go run gen.go
func main() {
	currentUser, err := user.Current()
	die(err)

	err = os.Mkdir("generated", 0700)
	if err != nil && !os.IsExist(err) {
		die(err)
	}

	f, err := os.Create(path.Join("generated", "consts.go"))
	die(err)

	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		User      string
		Vars      map[string]string
	}{
		Timestamp: time.Now(),
		User:      currentUser.Name,
		Vars:      environVariables,
	})
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
// using data from
// {{ .User }}
package generated

// Various S3 information.
// Note: we can't have them as const because we need their pointer
var S3BucketRegion = {{ printf "%q" .Vars.S3_AWS_REGION }}
var S3BucketName = {{ printf "%q" .Vars.S3_BUCKET }}

const S3AWSAccessKeyID = {{ printf "%q" .Vars.S3_AWS_ACCESS_KEY_ID }}
const S3AWSSecretKey = {{ printf "%q" .Vars.S3_AWS_SECRET_KEY }}
const S3AwsSessionToken = {{ printf "%q" .Vars.S3_AWS_SESSION_TOKEN }}

// Misc
const RequiredSecretKey = {{ printf "%q" .Vars.REQUIRED_SECRET_KEY }}
`))
